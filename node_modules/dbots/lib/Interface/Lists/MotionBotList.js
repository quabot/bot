"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var Service_1 = require("../Service");
var Util_1 = require("../../Utils/Util");
/**
 * Represents the MotionBotlist service.
 * @see https://www.motiondevelopment.top/docs/api/intro
 */
var MotionBotlist = /** @class */ (function (_super) {
    __extends(MotionBotlist, _super);
    function MotionBotlist() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    Object.defineProperty(MotionBotlist, "aliases", {
        /** The values that can be used to select the service. */
        get: function () {
            return [
                'motion',
                'motiondevelopment',
                'motionbotlist',
                'motiondevelopment.top'
            ];
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(MotionBotlist, "logoURL", {
        /** The logo URL. */
        get: function () {
            return 'https://www.motiondevelopment.top/favicon.ico';
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(MotionBotlist, "serviceName", {
        /** Service's name. */
        get: function () {
            return 'Motion Botlist';
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(MotionBotlist, "websiteURL", {
        /** The website URL. */
        get: function () {
            return 'https://www.motiondevelopment.top/bot';
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(MotionBotlist, "baseURL", {
        /** The base URL of the service's API. */
        get: function () {
            return 'https://www.motiondevelopment.top/api/v1.2';
        },
        enumerable: false,
        configurable: true
    });
    /**
     * Posts statistics to this service.
     * <warn>Shard data posting is not supported for this service.</warn>
     * @param options The options of the request.
     */
    MotionBotlist.post = function (options) {
        var token = options.token, clientID = options.clientID, serverCount = options.serverCount;
        return _super._post.call(this, {
            method: 'put',
            url: "/bots/" + Util_1.Util.resolveID(clientID) + "/stats",
            headers: {
                key: token,
                'Content-Type': 'application/json'
            },
            data: { guilds: Util_1.Util.resolveCount(serverCount) }
        });
    };
    /**
     * Gets a bot.
     * @param id The bot's ID.
     */
    MotionBotlist.prototype.getBot = function (id) {
        return this._request({
            url: "/bots/" + Util_1.Util.resolveID(id),
            headers: {
                key: this.token,
                'Content-Type': 'application/json'
            }
        }, { requiresToken: true });
    };
    /**
     * Gets a bot's votes.
     * @param id The bot's ID.
     */
    MotionBotlist.prototype.getBotVotes = function (id) {
        return this._request({
            url: "/bots/" + Util_1.Util.resolveID(id) + "/votes",
            headers: {
                key: this.token,
                'Content-Type': 'application/json'
            }
        }, { requiresToken: true });
    };
    return MotionBotlist;
}(Service_1.Service));
exports.default = MotionBotlist;
