import { Service, ServicePostOptions } from '../Service';
import { IDResolvable } from '../../Utils/Util';
import { Query } from '../../Utils/Constants';
/**
 * Represents the FatesList service.
 * @see https://fateslist.xyz/api/docs/endpoints
 */
export default class FatesList extends Service {
    /** The values that can be used to select the service. */
    static get aliases(): string[];
    /** The logo URL. */
    static get logoURL(): string;
    /** Service's name. */
    static get serviceName(): string;
    /** The website URL. */
    static get websiteURL(): string;
    /** The base URL of the service's API. */
    static get baseURL(): string;
    /**
     * Posts statistics to this service.
     * <warn>Shard data posting is not supported for this service.</warn>
     * @param options The options of the request
     */
    static post(options: ServicePostOptions): Promise<import("axios").AxiosResponse<never>>;
    /**
     * Gets a bot promotion
     * @param id The bot's ID
     */
    getPromotion(id: IDResolvable): Promise<import("axios").AxiosResponse<never>>;
    /**
     * Adds a bot promotion
     * @param botID The bot's ID
     * @param promotionData The promotion payload
     */
    addPromotion(botID: IDResolvable, promotionData: any): Promise<import("axios").AxiosResponse<never>>;
    /**
     * Deletes a bot promotion, or every promotion if no id is provided
     * @param botID The bot's ID
     * @param promotionID The promotion ID
     */
    deletePromotion(botID: IDResolvable, promotionID?: string): Promise<import("axios").AxiosResponse<never>>;
    /**
     * Edits a bot promotion
     * @param botID The bot's ID
     * @param promotionData The promotion payload
     */
    editPromotion(botID: IDResolvable, promotionData: any): Promise<import("axios").AxiosResponse<never>>;
    /**
     * Regenrates the API token
     * @param botID The bot's ID
     */
    regenerateToken(botID: IDResolvable): Promise<import("axios").AxiosResponse<never>>;
    /** Gets a random bot */
    getRandomBot(): Promise<import("axios").AxiosResponse<never>>;
    /**
     * Gets a bot from the API
     * @param id The bot's ID
     * @param query Query to use
     */
    getBot(id: IDResolvable, query?: Query): Promise<import("axios").AxiosResponse<never>>;
    /**
     * Get a bot's commands
     * @param id The bot's ID
     */
    getBotCommands(id: IDResolvable): Promise<import("axios").AxiosResponse<never>>;
    /**
     * Adds a command to a bot
     * @param botID The bot's ID
     * @param commandData The command payload
     * @param query The query to use
     */
    addBotCommand(botID: IDResolvable, commandData: any, query?: Query): Promise<import("axios").AxiosResponse<never>>;
    /**
     * Deletes a bot's command
     * @param botID The bot's ID
     * @param commandID The command ID
     */
    deleteBotCommand(botID: IDResolvable, commandID: string): Promise<import("axios").AxiosResponse<never>>;
    /**
     * Edits a bot's command
     * @param botID The bot's ID
     * @param commandData The command payload
     */
    editBotCommand(botID: IDResolvable, commandData: any): Promise<import("axios").AxiosResponse<never>>;
    /**
     * Gets the number of votes a user gave to a bot
     * @param botID The bot's ID
     * @param userID The user's ID
     */
    getVotes(botID: IDResolvable, userID: IDResolvable): Promise<import("axios").AxiosResponse<never>>;
    /**
     * Gets the votes a user gave to a bot with timestamps
     * @param botID The bot's ID
     * @param userID The user's ID
     */
    getTimestampedVotes(botID: IDResolvable, userID: IDResolvable): Promise<import("axios").AxiosResponse<never>>;
    /**
     * Allows you to enable or disable the maintenance status
     * @param botID The bot's ID
     * @param maintenanceData The maintenance payload
     */
    setMaintenance(botID: IDResolvable, maintenanceData?: any): Promise<import("axios").AxiosResponse<never>>;
    /**
     * Gets a service feature
     * @param featureName The internal name of the feature
     */
    getFeature(featureName: string): Promise<import("axios").AxiosResponse<never>>;
    /**
     * Gets a service tag
     * @param tagName The internal name of the tag
     */
    getTag(tagName: string): Promise<import("axios").AxiosResponse<never>>;
    /**
     * Gets a vanity from the service
     * @param vanity The vanity string
     */
    getVanity(vanity: string): Promise<import("axios").AxiosResponse<never>>;
    /**
     * Gets a user from the service
     * @param id The user's id
     */
    getUser(id: IDResolvable): Promise<import("axios").AxiosResponse<never>>;
    /**
     * Sets your user's description
     * @param userID The user's id
     * @param description The new description
     */
    setUserDescription(userID: IDResolvable, description: string): Promise<import("axios").AxiosResponse<never>>;
    /** Gets the bot index page */
    getBotIndex(): Promise<import("axios").AxiosResponse<never>>;
    /** Gets the bot search page */
    getSearch(): Promise<import("axios").AxiosResponse<never>>;
    /**
     * Gets the rendered bot description preview
     * @param previewData The preview payload
     */
    getDescriptionPreview(previewData: any): Promise<import("axios").AxiosResponse<never>>;
    /**
     * Gtes the valid servers on the service
     * @param userID The user's ID
     */
    getValidServers(userID: IDResolvable): Promise<import("axios").AxiosResponse<never>>;
}
