"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var Service_1 = require("../Service");
var Util_1 = require("../../Utils/Util");
/**
 * Represents the Listcord service.
 * @see https://listcord.gg/docs
 */
var Listcord = /** @class */ (function (_super) {
    __extends(Listcord, _super);
    function Listcord() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    Object.defineProperty(Listcord, "aliases", {
        /** The values that can be used to select the service. */
        get: function () {
            return ['listcord', 'listcord.gg'];
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(Listcord, "logoURL", {
        /** The logo URL. */
        get: function () {
            return 'https://cdn.discordapp.com/avatars/803339251940196383/50e92bb535cf88641ec22756937e6950.webp';
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(Listcord, "serviceName", {
        /** Service's name. */
        get: function () {
            return 'Listcord';
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(Listcord, "websiteURL", {
        /** The website URL. */
        get: function () {
            return 'https://listcord.gg/';
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(Listcord, "baseURL", {
        /** The base URL of the service's API. */
        get: function () {
            return 'https://listcord.gg/api/';
        },
        enumerable: false,
        configurable: true
    });
    /**
     * Posts statistics to this service.
     * <warn>Shard data posting is not supported for this service.</warn>
     * @param options The options of the request.
     */
    Listcord.post = function (options) {
        var token = options.token, clientID = options.clientID, serverCount = options.serverCount;
        return _super._post.call(this, {
            method: 'post',
            url: "/bots/" + Util_1.Util.resolveID(clientID) + "/stats/",
            headers: { Authorization: token },
            data: { server_count: Util_1.Util.resolveCount(serverCount) }
        });
    };
    /**
     * Gets a bot.
     * @param id The bot's ID.
     */
    Listcord.prototype.getBot = function (id) {
        return this._request({
            url: "/bots/" + Util_1.Util.resolveID(id),
            headers: { Authorization: this.token }
        }, { requiresToken: true });
    };
    /**
     * Gets a bot's reviews.
     * @param id The bot's ID.
     */
    Listcord.prototype.getBotReviews = function (id) {
        return this._request({
            url: "/bot/" + Util_1.Util.resolveID(id) + "/reviews",
            headers: { Authorization: this.token }
        }, { requiresToken: true });
    };
    /**
     * Gets whether a user has voted for a bot.
     * @param botID The bot's ID.
     * @param userID The user's ID.
     */
    Listcord.prototype.userVoted = function (botID, userID) {
        return this._request({
            url: "/bot/" + Util_1.Util.resolveID(botID) + "/voted",
            headers: { Authorization: this.token },
            params: { user_id: Util_1.Util.resolveID(userID) }
        }, { requiresToken: true });
    };
    /**
     * Gets a bot pack.
     * @param id The pack's id.
     */
    Listcord.prototype.getBotPack = function (id) {
        return this._request({
            url: "/pack/" + id,
            headers: { Authorization: this.token }
        }, { requiresToken: true });
    };
    /** Gets all botpacks. */
    Listcord.prototype.getBotPacks = function () {
        return this._request({
            url: '/packs',
            headers: { Authorization: this.token }
        }, { requiresToken: true });
    };
    return Listcord;
}(Service_1.Service));
exports.default = Listcord;
