"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var Service_1 = require("../Service");
var Util_1 = require("../../Utils/Util");
/**
 * Represents the discordlist.space service.
 * @see https://docs.botlist.space/
 */
var DiscordListSpace = /** @class */ (function (_super) {
    __extends(DiscordListSpace, _super);
    function DiscordListSpace() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    Object.defineProperty(DiscordListSpace, "aliases", {
        /** The values that can be used to select the service. */
        get: function () {
            return [
                'discordlistspace',
                'discordlist.space',
                'botlistspace',
                'botlist.space'
            ];
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(DiscordListSpace, "logoURL", {
        /** The logo URL. */
        get: function () {
            return 'https://discordlist.space/img/android-chrome-512x512.png';
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(DiscordListSpace, "serviceName", {
        /** Service's name. */
        get: function () {
            return 'discordlist.space';
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(DiscordListSpace, "websiteURL", {
        /** The website URL. */
        get: function () {
            return 'https://discordlist.space';
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(DiscordListSpace, "baseURL", {
        /** The base URL of the service's API. */
        get: function () {
            return 'https://api.discordlist.space/v2';
        },
        enumerable: false,
        configurable: true
    });
    /**
     * Posts statistics to this service.
     * <warn>Shard data posting is not supported for this service.</warn>
     * @param options The options of the request
     */
    DiscordListSpace.post = function (options) {
        var token = options.token, clientID = options.clientID, serverCount = options.serverCount;
        return _super._post.call(this, {
            method: 'post',
            url: "/bots/" + Util_1.Util.resolveID(clientID),
            headers: { Authorization: token, 'Content-Type': 'application/json' },
            data: { server_count: Util_1.Util.resolveCount(serverCount) }
        });
    };
    /** Gets the statistics of this service. */
    DiscordListSpace.prototype.getStatistics = function () {
        return this._request({ url: '/statistics' });
    };
    /**
     * Gets all the available languages that bots or servers can set as their language.
     * @param query The query to use in the request.
     */
    DiscordListSpace.prototype.getLanguages = function (query) {
        return this._request({ url: '/languages', params: query });
    };
    /**
     * Gets all available tags for use on bots or servers.
     * @param query The query to use in the request.
     */
    DiscordListSpace.prototype.getTags = function (query) {
        return this._request({ url: '/tags', params: query });
    };
    /**
     * Gets a list of bots on this service.
     * @param query The query to use in the request.
     */
    DiscordListSpace.prototype.getBots = function (query) {
        return this._request({ url: '/bots', params: query });
    };
    /**
     * Gets the bot listed on this service.
     * @param id The bot's ID.
     */
    DiscordListSpace.prototype.getBot = function (id) {
        return this._request({ url: "/bots/" + Util_1.Util.resolveID(id) });
    };
    /**
     * Gets the reviews of a bot.
     * @param id The bot's ID.
     * @param query The query to use in the request.
     */
    DiscordListSpace.prototype.getBotReviews = function (id, query) {
        return this._request({
            url: "/bots/" + Util_1.Util.resolveID(id) + "/reviews",
            params: query
        });
    };
    /**
     * Gets the analytics on a bot.
     * @param id The bot's ID.
     * @param query The query to use in the request.
     */
    DiscordListSpace.prototype.getBotAnalytics = function (id, query) {
        return this._request({
            url: "/bots/" + Util_1.Util.resolveID(id) + "/analytics",
            headers: { Authorization: this.token },
            params: query
        }, { requiresToken: true });
    };
    /**
     * Gets the list of people who voted this bot on this service.
     * @param id The bot's ID.
     */
    DiscordListSpace.prototype.getBotVotes = function (id) {
        return this._request({
            url: "/bots/" + Util_1.Util.resolveID(id) + "/upvotes",
            headers: { Authorization: this.token }
        }, {
            requiresToken: true
        });
    };
    /**
     * Checks if a specific user has upvoted the bot.
     * @param botID The bot's ID.
     * @param userID The user's ID.
     */
    DiscordListSpace.prototype.getUserUpvote = function (botID, userID) {
        return this._request({
            url: "/bots/" + Util_1.Util.resolveID(botID) + "/upvotes/status/" + Util_1.Util.resolveID(userID),
            headers: { Authorization: this.token }
        }, { requiresToken: true });
    };
    /**
     * Gets the top upvoters of this month.
     * @param id The bot's ID.
     * @param query The query to use with the request.
     */
    DiscordListSpace.prototype.getUpvoteLeaderboard = function (id, query) {
        return this._request({
            url: "/bots/" + Util_1.Util.resolveID(id) + "/upvotes/leaderboard",
            params: query
        });
    };
    /**
     * Gets the bot listing audit log.
     * @param id The bot's ID.
     * @param query The query to use with the request.
     */
    DiscordListSpace.prototype.getAuditLog = function (id, query) {
        return this._request({
            url: "/bots/" + Util_1.Util.resolveID(id) + "/audit",
            headers: { Authorization: this.token },
            params: query
        }, { requiresToken: true });
    };
    /**
     * Gets the owners of the bot listing.
     * @param id The bot's ID.
     * @param query The query to use in the request.
     */
    DiscordListSpace.prototype.getBotOwners = function (id, query) {
        return this._request({
            url: "/bots/" + Util_1.Util.resolveID(id) + "/owners",
            params: query
        });
    };
    /**
     * Gets the user listed on this service.
     * @param id The user's ID.
     */
    DiscordListSpace.prototype.getUser = function (id) {
        return this._request({ url: "/users/" + Util_1.Util.resolveID(id) });
    };
    /**
     * Gets the user's bots listed for this service.
     * @param id The user's ID.
     */
    DiscordListSpace.prototype.getUserBots = function (id) {
        return this._request({
            url: "/users/" + Util_1.Util.resolveID(id) + "/bots",
            headers: { Authorization: this.token }
        });
    };
    /**
     * Get all the lists that a user owns.
     * @param id The user's ID.
     * @param query The query to use in the request.
     */
    DiscordListSpace.prototype.getUserReviews = function (id, query) {
        return this._request({
            url: "/users/" + Util_1.Util.resolveID(id) + "/reviews",
            params: query
        });
    };
    return DiscordListSpace;
}(Service_1.Service));
exports.default = DiscordListSpace;
