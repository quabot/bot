import { Service, ServicePostOptions } from '../Service';
import { IDResolvable } from '../../Utils/Util';
import { Query } from '../../Utils/Constants';
/**
 * Represents the discordlist.space service.
 * @see https://docs.botlist.space/
 */
export default class DiscordListSpace extends Service {
    /** The values that can be used to select the service. */
    static get aliases(): string[];
    /** The logo URL. */
    static get logoURL(): string;
    /** Service's name. */
    static get serviceName(): string;
    /** The website URL. */
    static get websiteURL(): string;
    /** The base URL of the service's API. */
    static get baseURL(): string;
    /**
     * Posts statistics to this service.
     * <warn>Shard data posting is not supported for this service.</warn>
     * @param options The options of the request
     */
    static post(options: ServicePostOptions): Promise<import("axios").AxiosResponse<never>>;
    /** Gets the statistics of this service. */
    getStatistics(): Promise<import("axios").AxiosResponse<never>>;
    /**
     * Gets all the available languages that bots or servers can set as their language.
     * @param query The query to use in the request.
     */
    getLanguages(query?: Query): Promise<import("axios").AxiosResponse<never>>;
    /**
     * Gets all available tags for use on bots or servers.
     * @param query The query to use in the request.
     */
    getTags(query?: Query): Promise<import("axios").AxiosResponse<never>>;
    /**
     * Gets a list of bots on this service.
     * @param query The query to use in the request.
     */
    getBots(query?: Query): Promise<import("axios").AxiosResponse<never>>;
    /**
     * Gets the bot listed on this service.
     * @param id The bot's ID.
     */
    getBot(id: IDResolvable): Promise<import("axios").AxiosResponse<never>>;
    /**
     * Gets the reviews of a bot.
     * @param id The bot's ID.
     * @param query The query to use in the request.
     */
    getBotReviews(id: IDResolvable, query?: Query): Promise<import("axios").AxiosResponse<never>>;
    /**
     * Gets the analytics on a bot.
     * @param id The bot's ID.
     * @param query The query to use in the request.
     */
    getBotAnalytics(id: IDResolvable, query?: Query): Promise<import("axios").AxiosResponse<never>>;
    /**
     * Gets the list of people who voted this bot on this service.
     * @param id The bot's ID.
     */
    getBotVotes(id: IDResolvable): Promise<import("axios").AxiosResponse<never>>;
    /**
     * Checks if a specific user has upvoted the bot.
     * @param botID The bot's ID.
     * @param userID The user's ID.
     */
    getUserUpvote(botID: IDResolvable, userID: IDResolvable): Promise<import("axios").AxiosResponse<never>>;
    /**
     * Gets the top upvoters of this month.
     * @param id The bot's ID.
     * @param query The query to use with the request.
     */
    getUpvoteLeaderboard(id: IDResolvable, query?: Query): Promise<import("axios").AxiosResponse<never>>;
    /**
     * Gets the bot listing audit log.
     * @param id The bot's ID.
     * @param query The query to use with the request.
     */
    getAuditLog(id: IDResolvable, query?: Query): Promise<import("axios").AxiosResponse<never>>;
    /**
     * Gets the owners of the bot listing.
     * @param id The bot's ID.
     * @param query The query to use in the request.
     */
    getBotOwners(id: IDResolvable, query?: Query): Promise<import("axios").AxiosResponse<never>>;
    /**
     * Gets the user listed on this service.
     * @param id The user's ID.
     */
    getUser(id: IDResolvable): Promise<import("axios").AxiosResponse<never>>;
    /**
     * Gets the user's bots listed for this service.
     * @param id The user's ID.
     */
    getUserBots(id: IDResolvable): Promise<import("axios").AxiosResponse<never>>;
    /**
     * Get all the lists that a user owns.
     * @param id The user's ID.
     * @param query The query to use in the request.
     */
    getUserReviews(id: IDResolvable, query?: Query): Promise<import("axios").AxiosResponse<never>>;
}
