"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var Service_1 = require("../Service");
var Util_1 = require("../../Utils/Util");
/**
 * Represents the DiscordBotlistEU service.
 * @see https://docs.discord-botlist.eu/
 */
var DiscordBotlistEU = /** @class */ (function (_super) {
    __extends(DiscordBotlistEU, _super);
    function DiscordBotlistEU() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    Object.defineProperty(DiscordBotlistEU, "aliases", {
        /** The values that can be used to select the service. */
        get: function () {
            return ['dbleu', 'discordbotlisteu'];
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(DiscordBotlistEU, "logoURL", {
        /** The logo URL. */
        get: function () {
            return 'https://cdn.discord-botlist.eu/pictures/logo.png';
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(DiscordBotlistEU, "serviceName", {
        /** Service's name. */
        get: function () {
            return 'DiscordBotlist.EU';
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(DiscordBotlistEU, "websiteURL", {
        /** The website URL. */
        get: function () {
            return 'https://discord-botlist.eu/';
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(DiscordBotlistEU, "baseURL", {
        /** The base URL of the service's API. */
        get: function () {
            return 'https://api.discord-botlist.eu/v1';
        },
        enumerable: false,
        configurable: true
    });
    /**
     * Posts statistics to this service.
     * <warn>Shard data posting is not supported for this service.</warn>
     * @param options The options of the request
     */
    DiscordBotlistEU.post = function (options) {
        var token = options.token, serverCount = options.serverCount;
        return _super._post.call(this, {
            method: 'post',
            url: "/update",
            headers: { Authorization: "Bearer " + token },
            data: { serverCount: Util_1.Util.resolveCount(serverCount) }
        });
    };
    /** Gets this bot */
    DiscordBotlistEU.prototype.getBot = function () {
        return this._request({
            url: "/ping",
            headers: { Authorization: "Bearer " + this.token }
        }, { requiresToken: true });
    };
    /** Gets this bot's analytics */
    DiscordBotlistEU.prototype.getAnalytics = function () {
        return this._request({
            url: "/analytics",
            headers: { Authorization: "Bearer " + this.token }
        }, { requiresToken: true });
    };
    /** Gets the bot's votes */
    DiscordBotlistEU.prototype.getVotes = function () {
        return this._request({
            url: "/votes",
            headers: { Authorization: "Bearer " + this.token }
        }, { requiresToken: true });
    };
    return DiscordBotlistEU;
}(Service_1.Service));
exports.default = DiscordBotlistEU;
