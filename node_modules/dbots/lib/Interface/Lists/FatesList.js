"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
Object.defineProperty(exports, "__esModule", { value: true });
var Service_1 = require("../Service");
var Util_1 = require("../../Utils/Util");
/**
 * Represents the FatesList service.
 * @see https://fateslist.xyz/api/docs/endpoints
 */
var FatesList = /** @class */ (function (_super) {
    __extends(FatesList, _super);
    function FatesList() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    Object.defineProperty(FatesList, "aliases", {
        /** The values that can be used to select the service. */
        get: function () {
            return ['fateslist', 'fateslist.xyz'];
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(FatesList, "logoURL", {
        /** The logo URL. */
        get: function () {
            return 'https://cdn.discordapp.com/avatars/798951566634778641/dfb619dd43f9039dbd4d7854845aa0ca.png';
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(FatesList, "serviceName", {
        /** Service's name. */
        get: function () {
            return 'Fates List';
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(FatesList, "websiteURL", {
        /** The website URL. */
        get: function () {
            return 'https://fateslist.xyz/';
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(FatesList, "baseURL", {
        /** The base URL of the service's API. */
        get: function () {
            return 'https://fateslist.xyz/api';
        },
        enumerable: false,
        configurable: true
    });
    /**
     * Posts statistics to this service.
     * <warn>Shard data posting is not supported for this service.</warn>
     * @param options The options of the request
     */
    FatesList.post = function (options) {
        var token = options.token, clientID = options.clientID, serverCount = options.serverCount, userCount = options.userCount, shard = options.shard;
        return _super._post.call(this, {
            method: 'post',
            url: "/bots/" + Util_1.Util.resolveID(clientID) + "/stats",
            headers: { Authorization: token },
            data: __assign({ guild_count: Util_1.Util.resolveCount(serverCount), user_count: Util_1.Util.resolveCount(userCount) }, (shard
                ? {
                    shards: shard.count
                }
                : {}))
        });
    };
    /**
     * Gets a bot promotion
     * @param id The bot's ID
     */
    FatesList.prototype.getPromotion = function (id) {
        return this._request({ url: "/bots/" + Util_1.Util.resolveID(id) + "/promotions" });
    };
    /**
     * Adds a bot promotion
     * @param botID The bot's ID
     * @param promotionData The promotion payload
     */
    FatesList.prototype.addPromotion = function (botID, promotionData) {
        return this._request({
            method: 'post',
            url: "/bots/" + Util_1.Util.resolveID(botID) + "/promotions",
            headers: {
                Authorization: this.token
            },
            data: promotionData
        }, { requiresToken: true });
    };
    /**
     * Deletes a bot promotion, or every promotion if no id is provided
     * @param botID The bot's ID
     * @param promotionID The promotion ID
     */
    FatesList.prototype.deletePromotion = function (botID, promotionID) {
        return this._request({
            method: 'delete',
            url: "/bots/" + Util_1.Util.resolveID(botID) + "/promotions",
            headers: {
                Authorization: this.token
            },
            data: { promo_id: promotionID }
        }, { requiresToken: true });
    };
    /**
     * Edits a bot promotion
     * @param botID The bot's ID
     * @param promotionData The promotion payload
     */
    FatesList.prototype.editPromotion = function (botID, promotionData) {
        return this._request({
            method: 'patch',
            url: "/bots/" + Util_1.Util.resolveID(botID) + "/promotions",
            headers: {
                Authorization: this.token
            },
            data: promotionData
        }, { requiresToken: true });
    };
    /**
     * Regenrates the API token
     * @param botID The bot's ID
     */
    FatesList.prototype.regenerateToken = function (botID) {
        return this._request({
            method: 'patch',
            url: "/bots/" + Util_1.Util.resolveID(botID) + "/token",
            headers: {
                Authorization: this.token
            }
        }, { requiresToken: true });
    };
    /** Gets a random bot */
    FatesList.prototype.getRandomBot = function () {
        return this._request({ url: '/bots/random' });
    };
    /**
     * Gets a bot from the API
     * @param id The bot's ID
     * @param query Query to use
     */
    FatesList.prototype.getBot = function (id, query) {
        return this._request({
            url: "/bots/" + Util_1.Util.resolveID(id),
            headers: { Authorization: this.token },
            params: query
        });
    };
    /**
     * Get a bot's commands
     * @param id The bot's ID
     */
    FatesList.prototype.getBotCommands = function (id) {
        return this._request({ url: "/bots/" + Util_1.Util.resolveID(id) + "/commands" });
    };
    /**
     * Adds a command to a bot
     * @param botID The bot's ID
     * @param commandData The command payload
     * @param query The query to use
     */
    FatesList.prototype.addBotCommand = function (botID, commandData, query) {
        return this._request({
            method: 'post',
            url: "/bots/" + Util_1.Util.resolveID(botID) + "/commands",
            headers: { Authorization: this.token },
            params: query,
            data: commandData
        }, { requiresToken: true });
    };
    /**
     * Deletes a bot's command
     * @param botID The bot's ID
     * @param commandID The command ID
     */
    FatesList.prototype.deleteBotCommand = function (botID, commandID) {
        return this._request({
            method: 'delete',
            url: "/bots/" + Util_1.Util.resolveID(botID) + "/commands",
            headers: { Authorization: this.token },
            data: { id: commandID }
        }, { requiresToken: true });
    };
    /**
     * Edits a bot's command
     * @param botID The bot's ID
     * @param commandData The command payload
     */
    FatesList.prototype.editBotCommand = function (botID, commandData) {
        return this._request({
            method: 'patch',
            url: "/bots/" + Util_1.Util.resolveID(botID) + "/commands",
            headers: { Authorization: this.token },
            data: commandData
        }, { requiresToken: true });
    };
    /**
     * Gets the number of votes a user gave to a bot
     * @param botID The bot's ID
     * @param userID The user's ID
     */
    FatesList.prototype.getVotes = function (botID, userID) {
        return this._request({
            url: "/bots/" + Util_1.Util.resolveID(botID) + "/votes",
            headers: { Authorization: this.token },
            params: { user_id: Util_1.Util.resolveID(userID) }
        }, { requiresToken: true });
    };
    /**
     * Gets the votes a user gave to a bot with timestamps
     * @param botID The bot's ID
     * @param userID The user's ID
     */
    FatesList.prototype.getTimestampedVotes = function (botID, userID) {
        return this._request({
            url: "/bots/" + Util_1.Util.resolveID(botID) + "/votes/timestamped",
            headers: { Authorization: this.token },
            params: { user_id: Util_1.Util.resolveID(userID) }
        }, { requiresToken: true });
    };
    /**
     * Allows you to enable or disable the maintenance status
     * @param botID The bot's ID
     * @param maintenanceData The maintenance payload
     */
    FatesList.prototype.setMaintenance = function (botID, maintenanceData) {
        return this._request({
            method: 'post',
            url: "/bots/" + Util_1.Util.resolveID(botID) + "/maintenance",
            headers: { Authorization: this.token },
            data: maintenanceData
        }, { requiresToken: true });
    };
    /**
     * Gets a service feature
     * @param featureName The internal name of the feature
     */
    FatesList.prototype.getFeature = function (featureName) {
        return this._request({ url: "/features/" + featureName });
    };
    /**
     * Gets a service tag
     * @param tagName The internal name of the tag
     */
    FatesList.prototype.getTag = function (tagName) {
        return this._request({ url: "/tags/" + tagName });
    };
    /**
     * Gets a vanity from the service
     * @param vanity The vanity string
     */
    FatesList.prototype.getVanity = function (vanity) {
        return this._request({ url: "/vanity/" + vanity });
    };
    /**
     * Gets a user from the service
     * @param id The user's id
     */
    FatesList.prototype.getUser = function (id) {
        return this._request({ url: "/users/" + Util_1.Util.resolveID(id) });
    };
    /**
     * Sets your user's description
     * @param userID The user's id
     * @param description The new description
     */
    FatesList.prototype.setUserDescription = function (userID, description) {
        return this._request({
            method: 'patch',
            url: "/users/" + Util_1.Util.resolveID(userID) + "/description",
            headers: { Authorization: this.token },
            data: { description: description }
        }, { requiresToken: true });
    };
    /** Gets the bot index page */
    FatesList.prototype.getBotIndex = function () {
        return this._request({ url: '/bots/ext/index' });
    };
    /** Gets the bot search page */
    FatesList.prototype.getSearch = function () {
        return this._request({ url: '/bots/ext/search' });
    };
    /**
     * Gets the rendered bot description preview
     * @param previewData The preview payload
     */
    FatesList.prototype.getDescriptionPreview = function (previewData) {
        return this._request({
            method: 'post',
            url: "/preview",
            data: previewData
        });
    };
    /**
     * Gtes the valid servers on the service
     * @param userID The user's ID
     */
    FatesList.prototype.getValidServers = function (userID) {
        return this._request({
            url: "/users/" + Util_1.Util.resolveID(userID) + "/valid_servers"
        });
    };
    return FatesList;
}(Service_1.Service));
exports.default = FatesList;
